extends ../layout

block content

  if warning
    div(id="warning")
        .alert.alert-warning.fade.in
            div= warning
  h3
    span(class="label label-default editableTitle" for="titleTextBox")
        if album.title
            span album.title
        else
            span Click to Add Text
  input(value="" type="text" style="padding-down:10px;" id="titleTextBox" name="titleTextBox" class="blur" hidden)

  //h2 #{album.title}
  div(class="col-sm-8")
    div(class="row" style="padding-up:10px;")
      div(id='map' style='height: 80vh;')
    div(class="row")
      div(class="col-sm-8")
      div(class="col-sm-1 pull-right")
        a(href='/play/'+album._id)
          span(class="glyphicon glyphicon-play")
          //img(alt='Play Button', width='100%' src='/play_button.png' )
  div(class="col-sm-4 pre-scrollable")
    //button(onclick='test()')
    //class="list-group"
    ol(id="sortable" )
      each image in album.images
        li(class="list-group-item" id=image._id)
          #{image.filename}
          img(src="data:image/jpeg;base64, "+image.thumbnail.toString('base64') style="max-width:100%;max-height:100%;")

      //li(class="list-group-item") First item
      //li(class="list-group-item") Second item
      //li(class="list-group-item") Third item


  script(type='text/javascript').
      $(function () {
          $("#sortable").sortable();
          $("#sortable").disableSelection();
      });
  script(type='text/javascript').
    var markers = [];
    var travelpath;
    function initMap() {
      console.log("initmap");

      var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 3,
        center: album.images[0]
      });

      // Create an array of alphabetical characters used to label the markers.
      var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

      markers = album.images.map(function(location, i) {
        return new google.maps.Marker({
          _id: location._id,
          position: location,
          label: labels[i % labels.length]
        });
      });

      // Add a marker clusterer to manage the markers.
      var markerCluster = new MarkerClusterer(map, markers, {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', gridSize: '10'});
      createPathfromLocations(album.images).setMap(map);


    }

    function createPathfromLocations(locs){
        travelpath = new google.maps.Polyline({
            path: locs,
            geodesic: true,
            strokeColor: '#FF0000',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
        return travelpath;
        //var polyline = new google.maps.Polyline(locations, '#ff0000', 5, 0.7);

        // Add the polyline to the map using map.addOverlay()
        //map.addOverlay(polyline);
        //polyline.setMap(map);

    }

    var album = !{JSON.stringify(album)};

  script(type='text/javascript').
    var idsInOrder = [];
    function sortArrayWithComparatorArray(a, b) {
        return idsInOrder.indexOf(a._id) - idsInOrder.indexOf(b._id);
    }
    var updateMap = function () {
        //var idsInOrder = $("#sortable").sortable("refreshPositions").children();

        idsInOrder = $("#sortable").sortable("toArray");

        //This part just changes the markers around, but they actually dont even have to be moved
        //console.log("markers before:");
        //console.log(markers);
        //markers.sort(sortArrayWithComparatorArray);
        //console.log("markers after:");
        //console.log(markers);

        console.log("locations: ");
        console.log(album.images);
        album.images.sort(sortArrayWithComparatorArray);
        console.log(album.images);
        var map = travelpath.getMap();
        travelpath.setMap(null);
        createPathfromLocations(album.images);
        travelpath.setMap(map);
        updatePositionsPersistCreation(album);
        //TODO persistcreation muss alles durchgehen und ordnen, sowie das ganze album haben (jetzt ist hier nur locations)
    }

    $("#sortable").sortable({
        stop: updateMap
    });

    function updatePositionsPersistCreation(album) {

        album.images.forEach((image, index) =>{
           image.position = index;
        });
        persistCreation(album);

    }

    function persistCreation(album){
        $.ajax({
            type: "POST",
            url: "/creation",
            data: {
                album: album,
                _csrf: "#{_csrf}"
            }
        });
    }

    //Code for editable label
    $('.editableTitle').click(function () {
        "use strict";
        $(this).hide();
        $('#' + $(this).attr('for'))
            .val($(this).text())
            .toggleClass("form-control")
            .show()
            .focus();
    });

    $('.blur').blur(function () {
        "use strict";
        $(this)
            .hide()
            .toggleClass("form-control");
        var myid = (this).id;
        $('span[for=' + myid + ']')
            .text($(this).val())
            .show();
        album.title = $(this).val();
        persistCreation(album);
    });

    //Removing Warnings
    $("#warning").ready().delay(5000).fadeOut();
  script(type='text/javascript' src='https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js' )
  //TODO Client API Key has to be Restricted after development is finished
  script(type='text/javascript' src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBu_4PKulFGlZtAB10E-ekucVFzm2KzSxk&callback=initMap")
