extends ../layout

block content
  if error
    div(id="error")
        .alert.alert-danger.fade.in
           div=error
  else
      div(id='map' style='height: 80vh;')
      div(class='row')

      div(id='myModal' class='playmodal' style='display: block' onclick='console.log("timeoutID:" +currentTimeOut); console.log("timeout cleared: "+clearTimeout(currentTimeOut)); currentResolve();')
          img(class='playmodal-content' id='img0' style='display: none')
          img(class='playmodal-content' id='img1' style='display: none')
          img(class='playmodal-content' id='img2' style='display: none')
          img(class='playmodal-content' id='img3' style='display: none')
          img(class='playmodal-content' id='img4' style='display: none')
      script(type='text/javascript').
        //var oauthToken = '#{accessToken}';
        var currentTimeOut; //Id of current Timeout, to enable user to skip it
        var currentResolve;
        var markers = [];
        var travelpath;
        function initMap() {
          console.log("initmap");
          var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 8,
            center: locations[0]
          });

          // Create an array of alphabetical characters used to label the markers.
          var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
          markers = locations.map(function(location, i) {
            return new google.maps.Marker({
              _id: location._id,
              position: location,
              label: labels[i % labels.length]
            });
          });
          // Add a marker clusterer to manage the markers.
          //var markerCluster = new MarkerClusterer(map, markers, {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m', gridSize: '10'});
          createPathfromLocations(locations).setMap(map);

          preloadImages(locations);
          panMapToAllLocations(map, locations, 0);

        }

        function createPathfromLocations(locs){
            travelpath = new google.maps.Polyline({
                path: locs,
                geodesic: true,
                strokeColor: '#FF0000',
                strokeOpacity: 1.0,
                strokeWeight: 2
            });
            return travelpath;
        }
        //All Relations of Google Maps Zooms according to the set zoom Faktor (0-20)
        var zoomRelations =[0, 591657550.500000,295828775.300000,147914387.600000,73957193.820000,36978596.910000,18489298.450000,9244649.227000,4622324.614000,2311162.307000,1155581.153000,577790.576700, 288895.288400,144447.644200,72223.822090,36111.911040,18055.955520,9027.977761,4513.988880,2256.994440,1128.497220];
        var locations = !{JSON.stringify(album.images)};


        var STEPS = 50;
        var STEPLENGTH= 20;
        var PRELOAD_IMG_COUNT = 5;

        function panMapToAllLocations(map, locs, i){  //Todo check before execution if
            console.log("panto");
            var modal = document.getElementById('myModal');
            var modalImg = document.getElementById("img"+i%PRELOAD_IMG_COUNT);
            console.log("currently panning to "+i);
            //console.log("modal " + JSON.stringify(modal) + " modalimg: " + JSON.stringify(modalImg));
            //modalImg.src = "https://drive.google.com/uc?export=view&id="+locs[0].id;

            console.log("Distance "+getDistanceFromLatLonInKm(locs[0].lat, locs[0].lng, locs[1].lat, locs[1].lng));


            sleep(STEPLENGTH*STEPS).then(()=>{
                //console.log(locs[0]);
                //console.log("lat starting: "+ locs[0].lat + "  lng starting: " + locs[0].lng);

                modal.style.display = "block";
                modalImg.style.display = "block";

                sleepAndSetTimeoutId(3000).then(()=>{
                    modal.style.display = "none";
                    modalImg.style.display = "none";
                    if(locs[PRELOAD_IMG_COUNT-1]){
                        modalImg.src = "https://drive.google.com/uc?export=view&id="+locs[PRELOAD_IMG_COUNT-1].id; //TODO evtl bei parametern herumspielen zwecks drehung
                        console.log("modalimg src is now: "+modalImg.src)
                    }

                    var bounds = new google.maps.LatLngBounds();
                    bounds.extend({lat: locs[0].lat, lng: locs[0].lng});
                    bounds.extend({lat: locs[1].lat, lng: locs[1].lng});
                    map.fitBounds(bounds);
                    //setMapZoomAccordingToDistance(map, getDistanceFromLatLonInKm(locs[0].lat, locs[0].lng, locs[1].lat, locs[1].lng));
                    slowPanTo(map, locs[1].lat, locs[1].lng, STEPS);
                    locs.shift();


                    //console.log("mymodal: ");
                    //console.log(JSON.stringify($("#myModal")));
                    //console.log("modalimg: ");
                    //console.log(JSON.stringify($("#img01")));
                    //$("#myModal").css("display","block");
                    //$("#img01").src = "20140810_121150.jpg";

                    if(locs.length != 1){
                       panMapToAllLocations(map, locs, i+1);
                    }
                    else{
                        sleep(STEPLENGTH*STEPS).then(() => {
                            //Show the last image
                            modalImg = document.getElementById("img" + (i + 1) % PRELOAD_IMG_COUNT);
                            modal.style.display = "block";
                            modalImg.style.display = "block";
                        });
                    }
                });


            });
        }

        function preloadImages(locs){
            for(i=0; i<PRELOAD_IMG_COUNT; i++){
                var img = document.getElementById("img"+i);
                if(img && locs[i]){
                    img.src = "https://drive.google.com/uc?export=view&id="+locs[i].id;
                }
                else console.error("No image found at Index "+i+", expected "+ PRELOAD_IMG_COUNT);
            }
        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }
        function sleepAndSetTimeoutId(ms) {
            return new Promise(resolve => {
                    currentResolve = resolve;
                    currentTimeOut = setTimeout(resolve, ms);
                    console.log("currentTimeout: " + currentTimeOut);
            });
        }

        function slowPanTo(map, goalLat, goalLong, steps) {
                var curLat = map.getCenter().lat();
                var curLng = map.getCenter().lng();
                //console.log("curlat: "+curLat+ "  curlng: " +curLng);
                var newLat = curLat + ((goalLat - curLat) / steps);
                var newLng = curLng + ((goalLong - curLng) / steps);
                map.panTo({lat: newLat, lng: newLng});
                if(steps==1){
                    return;
                }

                sleep(STEPLENGTH).then(()=>{
                   //console.log("stepping in: "+steps);
                   slowPanTo(map, goalLat, goalLong, steps-1);
                });
        }

        function setMapZoomAccordingToDistance(map, dist) {
            map.fitBounds()

            if(dist < 1){
                map.setZoom(11);
            }
            else map.setZoom(8);

        }

        //Haversine Formula
        function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
            var R = 6371; // Radius of the earth in km
            var dLat = deg2rad(lat2 - lat1);  // deg2rad below
            var dLon = deg2rad(lon2 - lon1);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2)
            ;
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c; // Distance in km
            return d;
        }

        function deg2rad(deg) {
            return deg * (Math.PI / 180)
        }

  script(type='text/javascript' src='https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js' )
  //TODO Client API Key has to be Restricted after development is finished
  script(type='text/javascript' src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBu_4PKulFGlZtAB10E-ekucVFzm2KzSxk&callback=initMap" async defer)
  script(type='text/javascript' src='https://apis.google.com/js/client.js?onload=onApiLoad')